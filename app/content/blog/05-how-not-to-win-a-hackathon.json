{
  "publishedAt": "28th Dec 2021",
  "content": "I want to start this article by mentioning that, compared to the other articles posted here, this one is a wee bit more personal, as it explores a subject which, although technical in its nature, is more oriented towards experiences: the hackathon. \n\n#\n<div class=\"text-center\">\n    <img style=\"margin:0 auto\" src='/images/uploads/05_01.jpg' description='In-person hackathon' alt='In-person hackathon' >\n    <p style=\"margin-top:0px;font-size:12px;\">That's me, at the last in person hackathon I've been to ðŸ¥²</p>\n</div>\n\n#\nAt the beginning of the year I've been asked by a group of former faculty colleagues, programmers themselves, to join the hackathon they were organizing not as a contestant, a position in which I found myself multiple times since I had my first hackathon in my senior year, but as a mentor, a person who, based on its experience, can help the contenders to establish, polish and implement their ideas in the span of a day. \n\nThough overwhelmed by the *\"offer\"*, I thought about it for a few hours before responding, because I felt I was not at that level: I participated in some hackathons, yes, I've won some prizes, of course, but I've never **won** a hackathon.   \n\nI felt like I didn't earn my stripes yet, so I was not exactly the best option for that position. \n\nWith this in mind, I managed to mutter a frail and long-delayed \"yes\" - and this is where the true challenge began and my dear imposter syndrome kicked in: right after joining the project, they've also asked me to write an article with tips & tricks regarding hackathons in order to convince people to join the contest and to help them prepare for a day of non-stop coding. \n\nIt was, to say the least, a challenge, because, even though I've written some articles in the past, I don't consider myself an article writer, the same way I don't consider myself a hackathon beast - so I had to deal with two things that triggered my insecurities and made me feel like saying *\"yes\"* was not exactly the best thing I could've said. (no marriage puns intended)\n\nLet me explain myself for a bit: I know I'm not the worst programmer that ever lived, the same way I know my articles are, probably, not the worst in the entire world. \n\nOn a good day I might even come up as a fairly decent programmer, and I could write a pretty interesting article, or at least I like to think I could, but there's a thing about imposter syndrome which I consider to be true: it does not disappear completely. ever. \n\nIt fades away in time, of course, and, after you accumulate some experience it might not feel that menacing, but, when a particular alignment of events occurs, it shows up and make you feel like an ~~incompetent shit~~ unskilled individual. Literally. \n\nWriting that article was difficult, to say the least, but it was done and it was published on [their blog](https://4mayo.ro/2021/02/16/hackathon-o-experienta-de-neratat-8-sfaturi-practice/) a few days before the hackathon started. \n\nThe experience as a mentor was awesome, though, and I felt great and thankful for being part of the whole event, but, even retrospectively, the article writing part sucked. \n\nIt didn't suck because of what it was, as I'm pretty comfortable when it comes to expressing my thoughts, but because of the insecurities I had at the moment. I'm glad, once again, that I had the opportunity to do it, but I can honestly say that I'm not particularly proud of the result. The good thing is that I'm not completely unsatisfied either: something is better than nothing, a saying which I will come back to soon enough. \n\nSince then I had two other experiences which made me feel a little bit more confident about the subject. \n\nThe first one was another experience as a mentor, this time at Smarthack, a hackathon dedicated to students and powered by multiple tech companies, including the company I work for. \n\n*In addition to that, the organizers interviewed me, so if you want to see me struggling to be articulate for ~40 minutes, [there you go.](https://youtu.be/8c9L4rMem8c?t=12441)*\n\nThe second event, the one which truly helped me to overcome some of my insecurities, was the fact that last month I actually won my first hackathon!, and it was a very, very therapeutic experience for my forever fluctuating self-confidence level, and it came after 24 hours of coding in which the thing I intended to do the least was winning. \n\nThis last event almost transforms the current title into clickbait, because, apparently, if you follow the *\"rules\"* that I'm about to share you might end up winning a hackathon, but, even with this \"inconvenience\", I was still convinced to rewrite the previous article and add a personal twist to it.   \n\nI'm pretty sure, though, that winning was possible because of some of these tips & tricks and the mentality I had since the contest started, but, without a doubt, it was more influenced by the fact that I had truly awesome teammates - which, no matter what's your reason for participating in a hackathon, it's a must-have. \n\nThe point of these so-called *rules* was initially to help the readers learn from the mistakes I did, to improve their performance a little bit, and to help them avoid the most common errors. \n\nSounds like bullshit, right? \n\nWell, I clearly didn't intend that, but I remember that I wanted to write something practical, and I think this is something that the previous version achieved more or less, but, meanwhile, I've had a change of heart: I want to write something useful which will certainly not make you a better hackathon contestant, but will, hopefully, assure that the first hackathon in which you'll take part won't be your last - another issue which, from my perspective, is insufficiently discussed.\n\nHackathons are nice: they make you come up with ideas you've never thought you would be capable of and get you hooked on a particular subject for at least 12 hours straight, together with a bunch of people with whom you share at least one well-defined passion.  \n\nThey, indeed, set up a nice environment in which you can socialize, have fun, learn, and discover other projects, other technologies, other ways of thinking, \n\n**but**\n\nthey can also suck big time if you come in with a slightly off mentality, you have too-high expectancies from yourself, you focus on the prizes or on the outcome a little bit too much, or simply romanticize the idea of hackathons without being aware that coming up with a decent idea, trying to solve actual issues, not sleeping and coding for 24 hours straight are not easy tasks.  \n\nYou will probably feel like giving up multiple times, you will feel tired after the first 10 hours in which you coded non-stop, you will feel hopeless when nothing seems to come together, but there is more than that. \n\nWith these [new rules](https://data.whicdn.com/images/308990909/original.jpg) I have only one objective: *to help you love hackathons without having to hate them first.*\n\nAnd I truly hope it is a tiny bit useful. \n\n<div class=\"text-center\">\n    <img style=\"margin:0 auto\" src='/images/uploads/05_02.jpg' description='People in a hackathon' alt='People in a hackathon'>\n    <p style=\"margin-top:0px;font-size:12px;\">Photo by <a href='https://unsplash.com/photos/QBpZGqEMsKg'>Alex Kotliarskyi</a></p>\n</div>\n\n## Technical \"Rules\"\n\nI decided to split the tips into two categories, the first one being composed of more pragmatic rules which target the technicalities of a hackathon which is, after all, a coding contest, no matter how great the ideas are. \n\n### 1. use a piece of technology you didn't use before\n\nI don't think there's any better type of event where you can learn something new.\n\nAt first, it might sound like a dumb idea, because having to figure out how a new piece of tech works doesn't sound like something you'd put on top of your list when, besides that, you have to implement a working demo in just a couple of hours. What you'll learn during a hackathon, though, will stay with you for a long, long time, and this is the main reason why it might be appealing after all. \n\nBesides the pressure, which, sometimes, is a good catalyst for learning, you would also have a valid reason to learn, instead of implementing your 32nd to-do-list app. \n\nIn addition to that, you're surrounded by people with whom you share a pretty solid passion. They decided that participating in a contest where coding instead of sleeping and eating like a normal person is a good idea, so they have to be, at least, a bit crazy, and a bit knowledgeable too. \n\nYou can learn a lot from them, even if, amid the competition, this is something that is often overlooked. \n\nI have yet to encounter a person who's not willing to help you with punctual questions during a hackathon, even if they're part of a team you're competing against. \n\nLife pro tip: even if it might be less obvious at times, people are generally good and nice - try not to forget that!\n\nLet's keep it honest, though, because you'll probably have a hard time working with a technology you've never touched before, so the sweet spot is to try something new, but for which you already have a solid base of knowledge. \n\nFor example, if you're a Node.js lover, you can avoid using express once again, and try to implement your back-end using koa, or Strapi. If you're a Django lover, this means that you already know Python, so playing around with Flask instead shouldn't be that difficult. \n\nThe point is to experiment in steps small enough to still be able to implement your app, even if you will do it at a slower pace, but big enough to dive into something new. The feeling of growth that you get at the end of a hackathon is something that will cement the things you've learned and will give you one more reason to love this type of event. \n\nAt the risk of contradicting myself, I think it's safer, though, to not have blind trust in your ability to pick up new technologies and to cover some tutorials, quick enough to be sure that you'll know where to start once the contest begins. \n\n### 2. don't be a hipster\n\nI make a lot of jokes about being a hipster myself, but, when it comes to tech and limited time, I strongly advise against it. \n\nIt sounds a little bit unclear, I know, but the idea is that, instead of going with the newest, fanciest framework which will make you feel hip, or going with an old, complicated system that will make you feel masterful, just settle for something which has a community that's big and active enough.\n\nThe most obvious reason for that it's the never-ending meme of StackOverflow being the savior of every programmer and, even though I think it's a bit overused, it's still true. \n\nSooner or later you'll encounter some problems, and you'll need some help to overcome them. \n\nFirst of all, if you choose a technology which is well maintained, the chances of finding the answer by yourself, on the Internet are pretty high - this argument only should be powerful enough, but, besides that, if you have a problem which is very niched, remember that you're accompanied by smart people: one of them might be able to help you, even when Google could not. \n\nThis is objectively hard if you settle for COBOL or the shiny JavaScript framework that came out yesterday. \n\nWith the risk of feeling a lot less heroic, sometimes it's just better to follow the herd. \n\n### 3. prepare a boilerplate\n\nSome hackathons have an explicit rule that disallows participants to use any piece of code they've written before the hackathon started, but I find this rule pretty confusing, because, for better or worse, you will still be using someone else's code, and, actually, most of the code that will be part of your demo won't be yours!\n\nIn my opinion, even when such a rule is mentioned by the organizers, preparing a boilerplate does not go against it, because you're not directly targeting the subject of the hackathon, but the abstract technicalities around it. \n\nFor example, based on the structure of some apps that I've already built, and some additional readings, I've created some boilerplates that help me to save some tens of minutes of configuration. They don't do anything specific, but they prepare the ground so, when the hackathon begins, I can jump directly into the actual implementation. \n\nThis might not sound like much, but, if you're using technologies that you're not fully comfortable with, or that require a big chunk of configuration, those tens of minutes might become hours without even noticing! \n\nI truly believe in transparency, fairness, and free knowledge, so [I open-source all of my boilerplates](https://github.com/search?q=axbg%2Fstarter), and, in case somebody is asking me about them, I don't hesitate to share them. \n\nYou can even take it one step further and prepare a template with the help of your teammates, so everybody would be familiar with the structure. In addition to that, it's a nice exercise to have your team's chemistry set up. \n\nI strongly advise you, though, to be very clear with this thing and ask organizers about this topic before the hackathon begins, so you and your team won't be disqualified if the whole situation is misunderstood. As with everything else, it's better to be safe than sorry. \n\n### 4. make sure it's working\n\nWhat, you might ask? Well, everything! \n\nSoftware has a natural tendency of failing exactly when it's needed the most, so make sure to spend some time the night before to check if your local environment is still golden. \n\nCreate a checklist and verify your compilers, interpreters, text editors, IDEs, Docker containers, VMs, emulators, local databases, and confirm that they still behave like you expect them to. \n\nIndeed, a small issue with one of those will not completely ruin your hackathon efficiency, but, as with the previous example, it might take from a few minutes up to a few hours to solve it, when it could have been prevented. Even if you're the most chill person on Earth, losing time during a hackathon is not something you want to experience very often. \n\nYou can also spend some time and configure all the resources that you and your colleagues will have to share. \n\nFor example, you can create a git repository in advance and configure accesses, prepare a shared directory on a cloud drive, deploy a remote database so everybody can use the same data while developing, or create a Docker image so that each one uses an identical environment. \n\nWhile it's not a requirement to have each detail figured out, there are a lot of things that can be optimized, and a lot of tools that can help you avoid frustrating problems on the day of the event. \n\n### 5. beauty is important\n\nOnce the hackathon begins, your main objective will be to deliver as many complex and interesting features as you could, and, once you start to feel the pressure of the time running out, making things work will become the top priority. \n\nIf you're like me, you'll struggle to implement the most unimportant details, such as a perfectly working authentication system, or optimized DB queries, but, let me say it out loud for both of us: NOBODY CARES ABOUT THEM. \n\nThe first contact anyone will have with your app will be its aesthetic side: how the pages are designed, the colors, the fonts, how everything comes together, how professional it looks. \n\nI participated in some hackathons where the organizers made it clear that the look doesn't matter at all, and we only have to focus on the functionality, but, guess what, in the end, it did matter, as the winning apps were, actually, the ones that looked the sharpest, even if they lacked in features. \n\nBeauty is important, and it's perfectly normal to be so, especially in a contest where nobody expects fully working solutions. If the UI of your app is put together well, it will inspire a sense of polishness and quality that transcends words. \n\nIt might sound like a bit of a hot take, and it's certainly not something that I would wear on a T-Shirt at a hackathon, but if you have to choose between perfecting a complex feature or improving the UI, use a mock and work on the interface. The outcome will be better most of the time.\n\nInstead of realizing that your app has a graphical interface 10 minutes before the presentation, it's better to treat the UI as a core feature and make sure that it won't be neglected. \n\nRemember, few things are harder to do than trying to pitch an ugly application.\n\n<div class=\"text-center\">\n    <img style=\"margin:0 auto\" src='/images/uploads/05_03.jpg' description='Team work' alt='Team work'>\n    <p style=\"margin-top:0px;font-size:12px;\">Photo by <a href='https://unsplash.com/photos/KdeqA3aTnBY'>Dylan Gillis</a></p>\n</div>\n\n## Mental \"Rules\"\n\nI had a pretty hard time coming up with a name for this category of rules, as they are, from my perspective, more important than the technical ones, and I didn't want to diminish their importance by choosing a lame name. \n\nIf you completely disregard the technical rules, you might still have a great time, and, why not? even win something, but disregarding these rules will make it way harder to achieve any of that. \n\nThey are mental because they are referring to attitudes, behaviors, and things that happen in your head and are not directly related to the technicalities of such an event, but they can also be *\"mental\"*, because, from time to time, they might feel counter-intuitive. \n\nJust bear with me, please, they might even start to make sense.. eventually. \n\n### 1. winning is not the point\n\nI know, the prizes look good and they're part of the reasons why people are willing to stay up all night in front of their computers instead of getting some nice hours of sleep. \n\nIt's no doubt that somewhere in the back of your mind you will be motivated by the prizes, especially if it's something you like or if it's straight-up money, but, trust me, in the long run, winning a hackathon is the least objective that you should want to check off your list. \n\nThe first hackathon is an important milestone for anyone, and it can set the tone and the feelings that you have towards this kind of event. \n\nI was lucky, because, at my first hackathon, which happened in my senior year, I earned 3rd place, and, while not being the absolute winner, it was motivating enough and gave me a taste for doing it. \n\nThe only problem was that I started my first hackathon with the clear intention of winning, and the prize I've won did nothing more than to emphasize this attitude. \n\nAnd it was bad. \n\nHackathons are technical events, so they can affect you in negative ways as well, especially if you're struggling with self-doubt, imposter syndrome, and other feelings that make you want to affirm yourself and continuously search for ways to increase your level of confidence, even if you're not aware of it. \n\nFinishing in one of the top places right off the bat was enough to make me join a second hackathon, but, without this achievement back then, I doubt that I would have participated in another one because my perspective on winning was clearly degrading the whole experience. \n\nMy first hackathon sucked from multiple points of view that were not related to anything external, but to the stress, the anxiety, and the constant pressure that I've put on myself in order to fulfill my expectancies. In the end, only the fact that I won something made it worthwhile.\n\nAnd I think that you can see my point already - hackathons have so many great sides, from meeting cool people to learning and finding out about new interesting projects - focusing solely on winning will suck out all the joy, and will make the contest hours feel like the ninth circle of hell. \n\nI've been there. \n\nMy second hackathon was even worse because I went in with the same mentality, but, this time, I didn't win anything. :) \n\nI won't say anything else about it, just that it took 9 months to convince myself to participate in a hackathon again, and I'm glad I did because my attitude started to improve from this point onwards. \n\nAs a matter of fact, in my last hackathon to date, I was not thinking about winning at all, and I really enjoyed it. I had enough time to properly interact with my colleagues and to talk freely about our ideas and our implementation, instead of constantly feeling like I'm running out of time - and it was fantastic. \n\nBesides that, we won first place, and although it's true: it felt really, really nice, it was never the point. \n\nWe won because we had a great time - not the other way around. \n\n### 2. something is better than nothing\n\nIt's no doubt that perfectionism and low self-esteem go hand in hand, I know, so this rule is here to prevent all the doomers out there, including myself, from self-sabotage. Or, at least, to make it a little bit easier to accept that you're never going to have a perfect app, a perfect design, or a perfect demo. \n\nJust as in any other situation, the fact that you know all the issues and all the things that can go wrong with the result of your work makes the idea of pitching one hell of a lot harder. The bad news is that, in hackathons, it's a must. \n\nThis attitude can affect not only you, but everybody else as well, especially because doomers tend to stick together, and you might not be the only one in the team with this kind of gloomy prospect. \n\nI will come back for a little while to my latest hackathon experience, and, yeah, I'll repeat it the hundredth time, we won, but guess which member of the team wanted to give it all up minutes before the demo was about to happen because one of the implemented scenarios didn't fully work. \n\nYeah, it's easy, I know - it was me. \n\nFortunately, everybody else thought it was nuts, and I can't say how much I appreciate that they convinced me of it as well. \n\nEven if your demo is working only when there are clouds outside or when you click the mouse with your off-hand or even if it's not working at all - you should not overthink it! \n\nI agree with what [Pharell says](https://www.youtube.com/watch?v=5NV6Rdv1a3I), but being up all night is not only about having fun: it's also about hard work. You worked your ass off - you should always show it: something is better than nothing. \n\nIt will make you grow, learn, experiment, and reinforce the feeling that you're not a quitter. \n\nAnd, who knows, you might even get lucky. :)  \n\n### 3. diversity is good\n\nNo matter what your conservative uncle told everybody at the Christmas gathering, diversity is good - there's no doubt about it. \n\nIn the context of hackathons, diversity is even more important, because, even though you will need technical folks, having only programmers in your team might not be as good as it sounds. \n\nSometimes it might not work at all. \n\nBesides technical people, which have to focus their attention on the implementation itself, you'll also need someone to take care of the rest. Unfortunately, when we talk about hackathons, there are a lot of other \"rests\".\n\nKeep in mind that nobody expects a perfect implementation - nobody. Your implementation should be good enough but should fend for itself in other aspects too. \n\nThere should be balance.\n\n<div class=\"text-center\">\n    <img style=\"margin:0 auto\" src='/images/uploads/05_04.gif' description='Thanos Perfectly Balanced meme' alt='Thanos Perfectly Balanced meme' >\n    <p style=\"margin-top:0px;font-size:12px;\">Published by NobleDame on <a href='https://tenor.com/view/perfectly-balanced-thanos-infinity-war-gif-13078930'>Tenor</a></p>\n</div>\n\nThe most obvious aspect is that, before the code starts flowing, you need a good idea.  \n\nI believe that good programmers are, in fact, very creative people, but their creativity might be a bit constrained by the fact that they visualize the next few hours as a coding contest: even though that's not entirely true, coders mostly join a hackathon to code - no surprise at all. \n\nEvery great team needs a creative beast - someone who can come with a good idea and improve it on the go, someone who can find the right words to convince the jury that your application is the biggest thing since world wide web, someone who can conduct the whole creative process and has a holistic vision of every bit.\n\nBesides that, you will need tons of good visual content to promote your idea, to put up a nice pitch, and to enhance the looks of your application - beauty is always important, remember? \n\nA friend who's good with the likes of Photoshop and Illustrator is nothing short of a treasure, and will dramatically increase every aspect of your work, not only the UI. \n\nIn addition to that, you might also want to have a teammate who's good at public speaking and can deliver a top-notch pitch without being overwhelmed. \n\nThe point is that, besides front-end and back-end developers, you will also need some new perspectives, some people that can fill in the adjacent roles which are most of the time overlooked, even though they matter just as much as the implementation. \n\nLet's be realistic, though: it's very hard to have people specialized in every field required to build a successful project. In the real world, a product team has more than 5 members and, of course, more than 24 hours to come up with something. \n\nIf you're a great front-end developer, but also like to play around with graphics, that's good enough!\\\nIf your friend is a back-end developer, but also has a way of coming up with fantastic ideas, that's even better.\\\nIf you know somebody who believes that Java is a coffee of some sort, but it's an enthusiastic presenter that has a passion for innovation, don't hesitate!  \n\nThe perfect recipe does not exist, and most certainly having a team of extraordinary specialists is not a guarantee of success. \n\nYou have to feel comfortable with your teammates - and they should feel the same around you as well. More than anything else, it's important to take your time and connect with everyone, to know who can do what, and to emphasize the strong skills that you, as a team, possess. \n\n### 4. talk, talk, talk\n\nBuilding on the previous paragraph, this rule is about communication: talk constantly with your pals and tackle all the challenges you encounter together, as a team, not as a bunch of individuals that happen to be working at the same thing. \n\nI do this mistake often, and I bury myself in code, trying to implement the most efficient solution, the cleanest API ever seen so that, in the end, I have to change it up, risking to introduce new bugs, just because I didn't think about how the features will be integrated. \n\nYou are developing a product, not a stand-alone feature, and the product is implemented by the whole team, so try to see the work you're doing as a part of the process, not as the process itself. \n\nTry to establish a synchronization plan from the beginning and, most importantly, try to respect it! Once everyone will become more and more involved with their own tasks, it will become harder to break the flow and sync, but it's important to do it!\n\nFrom time to time, this break might feel silly and counterproductive, but, trust me, it's easier to fix something on the way, than to observe that the whole system is inherently broken minutes before the final whistle. \n\nThis desynchronization happens often in teams that are recently established, where the members don't have extensive experience of working together - and it's perfectly normal. Even though you start from the same idea, each member will internalize a slightly different version of it. \n\nWithout proper discussions, each one will start to develop its own version of the application, and, if you let the integration task for the last minute, you might have a big, yet unpleasant surprise. \n\nThe easiest way is to start from a generic method, say the Pomodoro technique, and adapt it on the go to satisfy the needs of your team.  \n\nIf your colleagues are also your friends and you've worked together before, you might not need to respect the Pomodoro guidelines religiously, because you already \"feel\" the team. \n\nAlso, if you know that a Kanban board might be of help, try to do that and spend a few minutes each hour to keep track of the progress. Once the number of hours left begins to converge to zero, a little bit of clarity could be magical. \n\nIt's also very important to avoid unnecessary complexity! \n\nThe sole purpose of synchronization is to improve the final result and the process itself, not to slow it down. Once something becomes to feel like a burden, don't be afraid to cut it off or reduce its frequency. \n\nEach team has its peak - sometimes even without [involving alcohol](https://xkcd.com/323/). \n\n### 5. don't forget to chill\n\nAlthough this is the easiest \"rule\" from this bunch, it can also feel like the most counterintuitive, because, when you have a couple of hours to work on something, chilling out is not the first action that might cross your mind. \n\nIf you're stressed, you will miss out on a lot of opportunities to enjoy the only thing that a hackathon truly represents: a celebration of passion in its purest form. The real reason why hackathons exist is to connect people, not to have them \"fight\". \n\nStress, not fear, is the true mind-killer!\n\nWhy would you voluntarily take part in an event that stresses you out? Objectively, it makes no sense.\n\nI know that, subjectively, the things are not that easy to fathom: it's a contest, goddamn, you should be stressed out! - this is the biggest obstacle that I had to overcome to truly enjoy hackathons. \n\nIf it's your first time, try to discover more about your colleagues and the other contestants. Take your time and speak with the mentors and with the companies that are organizing the event. Bookmark every piece of technology you come across and remember to read about it afterward. Take note of every aspect that inspires you. Stressing out is simply not worth it. \n\nIf you're already a veteran, try to shift your attention to those who are not and try to make them feel more relaxed and confident, especially if they are your teammates. If you are one of the most experienced members of the team, you might not realize it, but your attitude will set the tone for everybody else, and the last thing you'd like to be part of is a group of people yelling at each other about how a REST interface should be implemented. \n\nTry to calm everyone down, but don't forget to take some time for yourself to explore everything that a hackathon has to offer. You'll have enough time to code - be sure that you have enough time to rejoice. \n\nDon't stress out. It will make everything worse. For everybody. \n\n### Summing it up\n\nThese are, at least for now, the most important \"rules\" that I try to follow when I join a hackathon. Some of them might be silly, and some of them might not make sense for everybody - and it's alright, I don't think it should, as they are a wrap-up of my own experiences and are tailored for my own needs. \n\nI hope that some of them make sense for you as well, but, even if not, I hope there's one thing that stays with you after everything you've read: everyone, even when winning a hackathon, has insecurities, fears, and doubts. It's normal, and I believe that talking about them can only change us and society for the better. \n\nThank you for sticking with me until the end! \n\nI wish you a glorious 2022! \nMay everything happen your way. \n\n<hr style=\"border: 1px dashed #2c7a7b\">\n\n#\n\nI will also make use of this ending to note down that, from now on, I would like to add a personal spin to all of my future articles, because, after all, this is what makes them truly mine. I appreciate every author who writes purely technical articles, but, as far as I'm concerned, I don't feel like it's what I want to do, at least not here.\n\nOf course, my future articles, it there would be any lol, would still be technical, or, at least, somehow related to programming, but they will also have me talking about my perspective on a particular subject, what I found interesting, what were the challenges and so on. \n\nI hope that this way I'll be able to find the sense of fulfillment I've been searching for. \n\nOr, at least, to post more than once a year. ðŸ¥²\n\n<div class=\"text-center\">\n    <bold><h3>See you next time</h3></bold>\n</div>",
  "title": "05 - How not to win a Hackathon",
  "seoDescription": "At the beginning of the year I've been asked by a group of former faculty colleagues, programmers themselves, to join the hackathon they were organizing not as a contestant, but as a mentor - and this is where the challenge began",
  "seoMetaImage": "https://blog.axbg.space/images/uploads/05_01.jpg",
  "tag": "Experiences"
}
