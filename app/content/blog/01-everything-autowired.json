{
  "publishedAt": "28th April 2020",
  "title": "01 - Everything @Autowired",
  "content": "Even though it felt out of grace since the constructor injection became a best practice, the @Autowired annotation is still worth reviewing.\r\n\r\nIf you've wondered how a single word can inject a whole class with its mere presence: **gotcha**.  \r\nThe @Autowired annotation is the perfect introduction to metaprogramming.\r\n\r\n<div class=\"text-center\">\r\n    <img src='/images/uploads/01_01.jpg' description='' >\r\n    <p style=\"margin-top:0px;font-size:12px;\">Photo by <a href='https://unsplash.com/@maximilianweisbecker'>Maximilian Weisbecker</a></p>\r\n</div>\r\n\r\n#\r\n### Annotations overview\r\nFirst of all, an annotation is used to mark up classes, fields, parameters, or methods, allowing us to check for their presence in some particular conditions.\r\n\r\nA basic annotation implementation looks like this and it fairly resembles an interface.\r\n\r\n```java\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface CustomAnnotation {\r\n    int value() default 0;\r\n}\r\n```\r\n\r\nIf the first thing that went through your head was why the annotation is annotated, it's ok, I thought the same thing.  \r\nBesides, being a special type of interface, an annotation can have its own attributes, but in a form that resembles methods.  \r\nYou can find a nice intro to [annotations here](https://www.baeldung.com/java-custom-annotation). \r\n\r\nAnyway, the most common annotations you'll find on custom annotations are:\r\n- [@Target](https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Target.html) specifies what structures the annotation will target. As I mentioned before parameters, classes, methods, and fields can be annotated, but Packages can be annotated too!\r\n- [@RetentionPolicy](https://docs.oracle.com/javase/7/docs/api/java/lang/annotation/RetentionPolicy.html) declares how much the annotation will be available before it's dropped. It can be kept during the runtime, discarded by the VM, or not written in the .class file at all.\r\n- [@Repeatable](https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html) which allows an annotation to be placed multiple times on the same entity \r\n\r\nAn annotation does not affect the behavior of our code in any way, but they help us identify how a part of a class should be treated.\r\n#\r\n### Enter: Annotation Processing.\r\nAs its name made it obvious, annotation processing is the step where the annotation will finally seem valuable.\r\n\r\nThere are many ways an annotation processor can be implemented, most popular being:\r\n- the actual [Annotation Processing API](https://www.baeldung.com/java-annotation-processing-builder) introduced in Java 8\r\n- Bytecode manipulation \r\n- clever hacks - if you've heard of the Lombok project, the [creators implemented a smart hack](http://notatube.blogspot.com/2010/11/project-lombok-trick-explained.html) using an unpublished API of the Java compiler which allows AST changes so the classes that are marked using a specific annotation can be modified)\r\n- processing annotations at runtime using Java Reflection\r\n\r\nThe last technique is also the one we will use to implement our spin of the @Autowired annotation.\r\n#\r\n### Writing the code\r\n\r\nFirst, we'll define our special annotation that will act like @Autowired but will be defined as a type-level annotation, so we'll use it on top of our class instead of our attributes.\r\n\r\nWhy? \r\n\r\nBecause an exact copy of the @Autowired wouldn't be so cool.  \r\nPlus, it, for sure, seems more magical than a regular field annotation and will help us visualize exactly how powerful the Java Reflection API is.\r\n\r\nAnd, because we're very original, let's call it @ManagedClass.\r\n\r\n```java\r\n@Target(ElementType.TYPE)\r\n@Retention(RetentionPolicy.CLASS)\r\npublic @interface ManagedClass {\r\n}\r\n```\r\n\r\nBesides the type-level annotation, we also defined it as a class retention annotation.\r\nWhy? I'll explain later.\r\n\r\n#### Next, we need a context. It's time for some creativity.\r\n\r\nLet's suppose we have a cat that's not so playful with young people. Each time we try to pet it, the chance we'll get a scratch decreases with our age, but is also dependent on the cat's disposition to be petted. It's a fact that cats are moody so making this awful generalization is not that far from the truth. (Disclaimer: I have a cat)  \r\n\r\nThe Human class\r\n```java\r\npublic class Human {\r\n    private int age;\r\n    private Cat cat;\r\n\r\n    public void setAge(int age) {\r\n        this.age = age;\r\n    }\r\n\r\n    public void pet() {\r\n        String result;\r\n        result = cat.calculateDisposition(age) > 10 ? \"Auch! This surely hurt!\" : \"The cat seems to like you!\";\r\n        System.out.println(age + \": \" + result);\r\n    }\r\n}\r\n```\r\n\\\r\nand the Cat class\r\n```java\r\n@ManagedClass\r\npublic class Cat {\r\n    private Random fakeRandomGenerator = new Random();\r\n\r\n    public int calculateDisposition(int humanAge) {\r\n        return fakeRandomGenerator.nextInt() + (int) (0.3 * humanAge);\r\n    }\r\n}\r\n```\r\nBecause the Human owns a Cat, we've annotated the Cat class with the @ManagedClass we've created earlier. Each time a human is instantiated, we'll somehow manage to give him \r\na pet without explicitly doing so.\r\n\r\nBefore we delve further, it would be nice if we'd read the official [Java Reflection trail](https://docs.oracle.com/javase/tutorial/reflect/index.html).  \r\nBut, because we're running out of time and our cat needs to be petted, we'll do that later. Promise!  \r\nShortly, using the Reflection API we can extract the class of an object using the .getClass() method and we'll obtain, guess what, a Class object.  \r\nIf no object is available, we can also use the Class.class syntax which will return the same thing.  \r\nThrough the Class object we can interrogate its methods, fields and even instantiate new objects at runtime in a more abstract way.\r\nWe'll play with some of them pretty soon, but, for the record, there's [an exhaustive list ready to be browsed](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html) you can check if you want to get more insight.\r\n\r\n<div class=\"text-center\">\r\n    <img src='/images/uploads/01_02.jpg' description='' >\r\n    <p style=\"margin-top:0px;font-size:12px;\">Photo by <a href='https://unsplash.com/@coffeegeek'>Coffee Geek</a></p>\r\n</div>\r\n\r\nIf you've recognized the @Autowired annotation, and I'm sure you did because you've come so far reading this article!, I'm pretty confident that you're also familiar with Java Beans.  \r\nJust for the record, a bean is nothing more than a serializable class that has all its attributes private, has properly named getters and setters, and the default constructor.  \r\nThe classes we defined before respect this convention.   \r\nAlmost.  \r\nOkay, you got me, they aren't actual beans, according to the definition, but, for simplicity, we will make an *exception*.\r\n\r\nIs it so important to follow this structure?  \r\nWell, **yes** - at least some of it.   \r\nBy using this pattern, we can instantiate an object right-away, without dealing with its attributes, and play with them later using its accessors.  \r\nThe classes our annotation processor will inspect are ready.  \r\nLet's define an AnnotationManager, then!\r\n```java\r\npublic class AnnotationManager {\r\n    private Map<String, Class<?>> injectableTypes;\r\n    private Map<String, Object> managedObjects;\r\n    private static AnnotationManager instance;\r\n\r\n    private AnnotationManager() {\r\n        managedObjects = new HashMap<>();\r\n        injectableTypes = new HashMap<>();\r\n        initializeInjectableTypes();\r\n    }\r\n\r\n    public static AnnotationManager getInstance() {\r\n        if (instance == null) {\r\n            instance = new AnnotationManager();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    private void initializeInjectableTypes() {\r\n        //TO DO\r\n    }\r\n\r\n    private Object getInjectableValue(String className) throws Exception {\r\n        if (!managedObjects.containsKey(className)) {\r\n            Object managedObject = provideManagedObject(injectableTypes.get(className));\r\n            managedObjects.put(className, managedObject);\r\n        }\r\n\r\n        return managedObjects.get(className);\r\n    }\r\n\r\n    public <T> T provideManagedObject(Class<?> clazz) throws Exception {\r\n        Constructor<?> constructor = clazz.getConstructor();\r\n        Object providedObject = constructor.newInstance();\r\n        for (Field field : clazz.getDeclaredFields()) {\r\n            if (injectableTypes.get(field.getType().getName()) != null) {\r\n                Object injectableValue = getInjectableValue(field.getType().getName());\r\n                field.setAccessible(true);\r\n                field.set(providedObject, injectableValue);\r\n            }\r\n        }\r\n        return (T) providedObject;\r\n    }\r\n}\r\n```\r\nWoah, compared to our previous classes, this one is quite big, so we'll take it step by step, in a way that should be easy to crunch.\r\n\r\nFirst of all, you've probably observed that our class is a singleton. It's a common pattern to ensure that we have a reliable, unique source that will provide all our dependency injections.\r\n\r\nAlso, the method initializeInjectableTypes() is not yet implemented.\r\nBut let's not forget about it.   \r\nHere we will get all the classes that are annotated using our special annotation and we will fill the injectableTypes Map, so our \r\nbean manager will know which classes it can provide.\r\nYou've probably noticed that this method is called inside the constructor. This way the map will be populated when the ClassManager is instantiated, an event that happens only once, thanks to the singleton nature we've discussed above.\r\n\r\nThe last two methods are, probably, the juiciest parts of this implementation.  \r\nLet's start with provideManagedObject().\r\n```java\r\npublic <T> T provideManagedObject(Class<?> clazz) throws Exception {\r\n    Constructor<?> constructor = clazz.getConstructor();\r\n    Object providedObject = constructor.newInstance();\r\n    for (Field field : clazz.getDeclaredFields()) {\r\n        if (injectableTypes.get(field.getType().getName()) != null) {\r\n            Object injectableValue = getInjectableValue(field.getType().getName());\r\n            field.setAccessible(true);\r\n            field.set(providedObject, injectableValue);\r\n        }\r\n    }\r\n    return (T) providedObject;\r\n}\r\n```\r\nThis method will be called each time we want to instantiate an object that requires a dependency injection.   \r\nThat's why the result is a template type - we need a way to return the class that is requested seamlessly. Inside this method, we get the constructor of our class, which is the default one, and we instantiate a new object of the class we've requested.   \r\nThe Java Reflection API is pretty forward and allows access to everything we need.  \r\nAfter that, we parse through each field of our class and check if its type is part of our injectableTypes map.\r\n\r\nWhy does it matter?  \r\nBecause if it is, we need to take our role as bean manager seriously and provide an instance of that type.  \r\n\r\nThen, we proceed in asking our mysterious method, getInjectableValue, for an instance. After that, we use a little bit of reflection magic and allow ourselves to modify a field that, \r\nyou're right, is technically private, and inject our freshly obtained instance. \r\n\r\n#### Metaprogramming baby! \r\n\r\nWhy did we called the getInjectableValue method and not directly instantiated the class before injecting it?\r\nWell, there's the beauty of it. Let's take a closer look.\r\n\r\n```java\r\nprivate Object getInjectableValue(String className) throws Exception {\r\n    if (!managedObjects.containsKey(className)) {\r\n        Object managedObject = provideManagedObject(injectableTypes.get(className));\r\n        managedObjects.put(className, managedObject);\r\n    }\r\n\r\n    return managedObjects.get(className);\r\n    }\r\n}\r\n```\r\nThe class we're trying to inject may contain another field that should be injected.  \r\nWhat does this method do?  \r\nFirstly, it checks, using the managedObjects map, if the required object was already instantiated for a previous request. If it didn't, it creates a new, lazy instance, puts it inside the map, and returns it.\r\nThe fact that we reuse the same object may seem weird, at first, but it's a common practice for the object that's injected to be the same for each injection. \r\n\r\nIn Spring, for example, we usually inject our services, our repositories, or other types of objects that can be used without depending too much on their inner state.  \r\nWe didn't pick the best example to see why this is, actually, useful, but let's assume that we're passing the cat to each involved human.\r\n\r\n#### There's gonna be a lot of scratches!\r\n\r\nWe're almost ready to give it a spin, but we got one more thing to discuss: the initializeInjectableTypes method that lacks an actual implementation.  \r\nPackage scanning is a complex task that can be achieved at multiple times during the lifecycle of a Java program.\r\nMost of the time, it's done at runtime by checking classes and indexing them based on the annotations that are present.  \r\nHow is it done? Many implementations are relying either on direct file system scanning or using some hacks around the [URLClassLoader](https://docs.oracle.com/javase/7/docs/api/java/net/URLClassLoader.html) to provide a list with available packages.  \r\nThe most popular one is Google's Reflections library that can provide exactly this functionality.\r\n\r\nWhat is the downside of this approach?  \r\nThe scanning is, usually, slow and it also happens at runtime.  \r\nYes, if you thought, for a second, that there's a faster approach, you're right.\r\n\r\nWe've mentioned earlier the Annotation Processing API that operates at compile time. Besides this, it can also query all the classes that are loaded and save the information gathered about them in special files that can be consulted later, at runtime.  \r\nPerfect for our case. This is also the reason why the level of retention on @ManagedClass is RetentionPolicy.CLASS, instead of RetentionPolicy.RUNTIME, which is more common.   \r\nThe best library that works this way is, probably, [ClassIndex](https://github.com/atteo/classindex).  \r\nUsing this approach let's implement our method and annotate our ....annotation so it can be tracked by the library.\r\n\r\nAdding @IndexAnnotated on top of our own annotation\r\n```java\r\n@IndexAnnotated\r\n@Target(ElementType.TYPE)\r\n@Retention(RetentionPolicy.CLASS)\r\npublic @interface ManagedClass {\r\n}\r\n```\r\n\\\r\nand implementing the last method using ClassIndex\r\n```java\r\nprivate void initializeInjectableTypes() {\r\n    for (Class<?> clazz : ClassIndex.getAnnotated(ManagedClass.class)) {\r\n        injectableTypes.put(clazz.getName(), clazz);\r\n    }\r\n}\r\n```\r\n\\\r\nLet's put it all together and write a sample that will put our code to work. A simple main will do.\r\n```java\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        AnnotationManager annotationManager = AnnotationManager.getInstance();\r\n\r\n        Human human = annotationManager.provideManagedObject(Human.class);\r\n        human.setAge(22);\r\n        human.pet();\r\n        \r\n        Human human = annotationManager.provideManagedObject(Human.class);\r\n        human.setAge(18);\r\n        human.pet();\r\n    }\r\n}\r\n```\r\nThe last thing we need to do is to run our program and see if it works.\r\n#\r\n### Analyzing the results\r\n\r\n```\r\n80: The cat seems to like you!\r\n18: Auch! This surely hurt!\r\n```\r\nThis looks ok, but it doesn't seem so impressive with only one level of depth.  \r\nLet's throw another class in play and see if our ClassManager succeeds to provide an injectable object that also requires a dependency injection.  \r\nAs we observed earlier, our cat is moody. Randomly, instead of scratching us or let us pet it, it will walk away and scratch its toy, then come back.  \r\nThis being said, let's provide a scratcher implementation.\r\n\r\n```java\r\n@ManagedClass\r\npublic class Scratcher {\r\n    public void scratch() {\r\n        System.out.println(\"\\nSccccccchhh\");\r\n    }\r\n}\r\n```\r\n\\\r\nNow let's give our cat one and modify her behavior.\r\n\r\n ```java\r\n @ManagedClass\r\npublic class Cat {\r\n    private Scratcher scratcher;\r\n    private Random fakeRandomGenerator = new Random();\r\n\r\n    public int calculateDisposition(int humanAge) {\r\n        int disposition = fakeRandomGenerator.nextInt() + (int) (0.3 * humanAge);\r\n\r\n        if (disposition % 2 == 0) {\r\n            scratcher.scratch();\r\n        }\r\n\r\n        return disposition;\r\n    }\r\n}\r\n ```\r\n\r\nThis means that, when we'll ask the ClassManager for a human before the cat can be provided, the scratcher should, also, be injected, checking if our implementation covers this case and, virtually, any scenario that requires class nesting.\r\n\r\n```\r\n80: Auch! This surely hurt!\r\n\r\nSccccccchhh\r\n18: The cat seems to like you!\r\n```\r\n\r\nThat was a huge mood swing, but everything looks in check! Our method works even for multiple layers.\r\nWith this being said, we just concluded my first article!\r\nIf you want to take a closer look or change the code in any way, you can find it [here](https://github.com/axbg/encapsulated-snippets/tree/main/01-Everything-Autowired).\r\n\r\nThank you for reading this!  \r\nI know that the subject may not be too interesting, nor too complex, but it was pretty hard to \r\nfind the first topic worth discussing. Also, article writing involves much more work than I initially thought. 😆  \r\nBut here we go.\r\n\r\n<div class=\"text-center\">\r\n    <bold><h3>See you next time</h3></bold>\r\n</div>",
  "tag": "Java Concepts",
  "seoDescription": "Even though it felt out of grace since the constructor injection became a best practice, the @Autowired annotation is still worth reviewing.",
  "seoMetaImage": "https://encapsulated.dev/images/uploads/01_01.jpg"
}